diff --git a/rtl/tlul_adapter_host.sv b/rtl/tlul_adapter_host.sv
index 0a7ed04..6217d1a 100644
--- a/rtl/tlul_adapter_host.sv
+++ b/rtl/tlul_adapter_host.sv
@@ -26,7 +26,9 @@ module tlul_adapter_host
   import prim_mubi_pkg::mubi4_t;
 #(
   parameter int unsigned MAX_REQS = 2,
+  parameter bit EnableCmdIntgGen = 0,
   parameter bit EnableDataIntgGen = 0,
+  parameter bit EnableRspIntgCheck = 0,
   parameter bit EnableRspDataIntgCheck = 0
 ) (
   input clk_i,
@@ -109,7 +111,10 @@ module tlul_adapter_host
     d_ready:   1'b1
   };
 
-  tlul_cmd_intg_gen #(.EnableDataIntgGen (EnableDataIntgGen)) u_cmd_intg_gen (
+  tlul_cmd_intg_gen #(
+    .EnableCmdIntgGen (EnableCmdIntgGen),
+    .EnableDataIntgGen (EnableDataIntgGen)
+  ) u_cmd_intg_gen (
     .tl_i(tl_out),
     .tl_o(tl_o)
   );
@@ -121,21 +126,28 @@ module tlul_adapter_host
   assign rdata_cap_o  = tl_i.d_user.capability;
   assign rdata_intg_o = tl_i.d_user.data_intg;
 
+  // integrity check on response.
+  logic intg_err_q;
   logic intg_err;
-  tlul_rsp_intg_chk #(
-    .EnableRspDataIntgCheck(EnableRspDataIntgCheck)
-  ) u_rsp_chk (
-    .tl_i,
-    .err_o(intg_err)
-  );
 
-  logic intg_err_q;
-  always_ff @(posedge clk_i or negedge rst_ni) begin
-    if (!rst_ni) begin
-      intg_err_q <= '0;
-    end else if (intg_err) begin
-      intg_err_q <= 1'b1;
+  if (EnableRspIntgCheck) begin : gen_rsp_intg_check
+    tlul_rsp_intg_chk #(
+      .EnableRspDataIntgCheck(EnableRspDataIntgCheck)
+    ) u_rsp_chk (
+      .tl_i,
+      .err_o(intg_err)
+    );
+
+    always_ff @(posedge clk_i or negedge rst_ni) begin
+      if (!rst_ni) begin
+        intg_err_q <= '0;
+      end else if (intg_err) begin
+        intg_err_q <= 1'b1;
+      end
     end
+  end else begin : gen_no_rsp_intg_check
+    assign intg_err   = 1'b0;
+    assign intg_err_q = 1'b0;
   end
 
   // err_o is transactional.  This allows the host to continue
diff --git a/rtl/tlul_cmd_intg_gen.sv b/rtl/tlul_cmd_intg_gen.sv
index 2ab0120..f32d5c5 100644
--- a/rtl/tlul_cmd_intg_gen.sv
+++ b/rtl/tlul_cmd_intg_gen.sv
@@ -9,6 +9,7 @@
  */
 
 module tlul_cmd_intg_gen import tlul_pkg::*; #(
+  parameter bit EnableCmdIntgGen = 1'b1,
   parameter bit EnableDataIntgGen = 1'b1
 ) (
   // TL-UL interface
@@ -16,15 +17,20 @@ module tlul_cmd_intg_gen import tlul_pkg::*; #(
   output tl_h2d_t tl_o
 );
 
-  tl_h2d_cmd_intg_t cmd;
-  assign cmd = extract_h2d_cmd_intg(tl_i);
-  logic [H2DCmdMaxWidth-1:0] unused_cmd_payload;
-
   logic [H2DCmdIntgWidth-1:0] cmd_intg;
-  prim_secded_inv_64_57_enc u_cmd_gen (
-    .data_i(H2DCmdMaxWidth'(cmd)),
-    .data_o({cmd_intg, unused_cmd_payload})
-  );
+
+  if (EnableCmdIntgGen) begin : gen_cmd_intg
+    tl_h2d_cmd_intg_t cmd;
+    assign cmd = extract_h2d_cmd_intg(tl_i);
+    logic [H2DCmdMaxWidth-1:0] unused_cmd_payload;
+
+    prim_secded_inv_64_57_enc u_cmd_gen (
+      .data_i(H2DCmdMaxWidth'(cmd)),
+      .data_o({cmd_intg, unused_cmd_payload})
+    );
+  end else begin : gen_no_cmd_intg
+    assign cmd_intg = tl_i.a_user.cmd_intg;
+  end
 
   logic [top_pkg::TL_DW-1:0] data_final;
   logic [DataIntgWidth-1:0] data_intg;
diff --git a/rtl/tlul_err_resp.sv b/rtl/tlul_err_resp.sv
index e79ad25..d7c38af 100644
--- a/rtl/tlul_err_resp.sv
+++ b/rtl/tlul_err_resp.sv
@@ -23,8 +23,8 @@ module tlul_err_resp (
   tlul_pkg::tl_d2h_t                 tl_h_o_int;
 
   tlul_rsp_intg_gen #(
-    .EnableRspIntgGen(1),
-    .EnableDataIntgGen(1)
+    .EnableRspIntgGen(0),
+    .EnableDataIntgGen(0)
   ) u_intg_gen (
     .tl_i(tl_h_o_int),
     .tl_o(tl_h_o)
diff --git a/rtl/tlul_rsp_intg_gen.sv b/rtl/tlul_rsp_intg_gen.sv
index 82f2ba5..fddda8a 100644
--- a/rtl/tlul_rsp_intg_gen.sv
+++ b/rtl/tlul_rsp_intg_gen.sv
@@ -17,8 +17,8 @@ module tlul_rsp_intg_gen import tlul_pkg::*; #(
   output tl_d2h_t tl_o
 );
 
-  logic [D2HRspIntgWidth-1:0] rsp_intg;
   if (EnableRspIntgGen) begin : gen_rsp_intg
+    logic [D2HRspIntgWidth-1:0] rsp_intg;
     tl_d2h_rsp_intg_t rsp;
     logic [D2HRspMaxWidth-1:0] unused_payload;
 
@@ -28,31 +28,30 @@ module tlul_rsp_intg_gen import tlul_pkg::*; #(
       .data_i(D2HRspMaxWidth'(rsp)),
       .data_o({rsp_intg, unused_payload})
     );
-  end else begin : gen_passthrough_rsp_intg
-    assign rsp_intg = tl_i.d_user.rsp_intg;
-  end
 
-  logic [DataIntgWidth-1:0] data_intg;
-  if (EnableDataIntgGen) begin : gen_data_intg
-    logic [DataMaxWidth-1:0] unused_data;
-    tlul_data_integ_enc u_tlul_data_integ_enc (
-      .data_i(DataMaxWidth'(tl_i.d_data)),
-      .data_intg_o({data_intg, unused_data})
-    );
-  end else begin : gen_passthrough_data_intg
-    assign data_intg = tl_i.d_user.data_intg;
-  end
-
-  always_comb begin
-    tl_o = tl_i;
-    tl_o.d_user.rsp_intg = rsp_intg;
-    tl_o.d_user.data_intg = data_intg;
+    logic [DataIntgWidth-1:0] data_intg;
+    if (EnableDataIntgGen) begin : gen_data_intg
+      logic [DataMaxWidth-1:0] unused_data;
+      tlul_data_integ_enc u_tlul_data_integ_enc (
+        .data_i(DataMaxWidth'(tl_i.d_data)),
+        .data_intg_o({data_intg, unused_data})
+      );
+    end else begin : gen_passthrough_data_intg
+      assign data_intg = tl_i.d_user.data_intg;
+    end
+
+    always_comb begin
+      tl_o = tl_i;
+      tl_o.d_user.rsp_intg = rsp_intg;
+      tl_o.d_user.data_intg = data_intg;
+    end
+  end else begin : gen_passthrough_rsp_intg
+    assign tl_o = tl_i;
   end
 
   logic unused_tl;
   assign unused_tl = ^tl_i;
 
-
   `ASSERT_INIT(PayLoadWidthCheck, $bits(tl_d2h_rsp_intg_t) <= D2HRspMaxWidth)
   `ASSERT_INIT(DataWidthCheck_A, $bits(tl_i.d_data) <= DataMaxWidth)
 
