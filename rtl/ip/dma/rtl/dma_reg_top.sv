// Copyright lowRISC contributors (OpenTitan project).
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "prim_assert.sv"

module dma_reg_top (
  input clk_i,
  input rst_ni,
  // To HW
  output dma_reg_pkg::dma_reg2hw_t reg2hw, // Write
  input  dma_reg_pkg::dma_hw2reg_t hw2reg, // Read

  input  tlul_pkg::tl_h2d_t tl_i,
  output tlul_pkg::tl_d2h_t tl_o
);

  import dma_reg_pkg::* ;

  localparam int AW = 7;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;
  logic reg_busy;

  tlul_pkg::tl_h2d_t tl_reg_h2d;
  tlul_pkg::tl_d2h_t tl_reg_d2h;


  // outgoing integrity generation
  tlul_pkg::tl_d2h_t tl_o_pre;
  tlul_rsp_intg_gen #(
    .EnableRspIntgGen(0),
    .EnableDataIntgGen(0)
  ) u_rsp_intg_gen (
    .tl_i(tl_o_pre),
    .tl_o(tl_o)
  );

  assign tl_reg_h2d = tl_i;
  assign tl_o_pre   = tl_reg_d2h;

  tlul_adapter_reg #(
    .RegAw(AW),
    .RegDw(DW),
    .EnableDataIntgGen(0)
  ) u_reg_if (
    .clk_i  (clk_i),
    .rst_ni (rst_ni),

    .tl_i (tl_reg_h2d),
    .tl_o (tl_reg_d2h),

    .en_ifetch_i(prim_mubi_pkg::MuBi4False),
    .intg_error_o(),

    .we_o    (reg_we),
    .re_o    (reg_re),
    .addr_o  (reg_addr),
    .wdata_o (reg_wdata),
    .be_o    (reg_be),
    .busy_i  (reg_busy),
    .rdata_i (reg_rdata),
    .error_i (reg_error)
  );

  // cdc oversampling signals

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = addrmiss | wr_err;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic intr_state_we;
  logic intr_state_completed_qs;
  logic intr_state_completed_wd;
  logic intr_state_error_qs;
  logic intr_state_error_wd;
  logic intr_enable_we;
  logic intr_enable_completed_qs;
  logic intr_enable_completed_wd;
  logic intr_enable_error_qs;
  logic intr_enable_error_wd;
  logic intr_test_we;
  logic intr_test_completed_wd;
  logic intr_test_error_wd;
  logic control_we;
  logic control_start_qs;
  logic control_start_wd;
  logic control_pause_qs;
  logic control_pause_wd;
  logic control_abort_qs;
  logic control_abort_wd;
  logic status_re;
  logic [3:0] status_state_qs;
  logic status_rd_idle_qs;
  logic status_wr_idle_qs;
  logic status_rd_active_qs;
  logic status_wr_active_qs;
  logic status_rd_paused_qs;
  logic status_wr_paused_qs;
  logic status_wr_error_qs;
  logic status_rd_error_qs;
  logic [7:0] status_committed_qs;
  logic [7:0] status_wr_pending_qs;
  logic error_rd_cap_error_qs;
  logic error_wr_cap_error_qs;
  logic error_rd_bus_error_qs;
  logic error_wr_bus_error_qs;
  logic src_config_we;
  logic src_config_enable_qs;
  logic src_config_enable_wd;
  logic [1:0] src_config_col_inc_qs;
  logic [1:0] src_config_col_inc_wd;
  logic src_status_we;
  logic [7:0] src_status_qs;
  logic [7:0] src_status_wd;
  logic src_cap_lo_we;
  logic [31:0] src_cap_lo_qs;
  logic [31:0] src_cap_lo_wd;
  logic src_cap_hi_we;
  logic [31:0] src_cap_hi_qs;
  logic [31:0] src_cap_hi_wd;
  logic src_stride_we;
  logic [31:0] src_stride_qs;
  logic [31:0] src_stride_wd;
  logic src_row_len_we;
  logic [19:0] src_row_len_qs;
  logic [19:0] src_row_len_wd;
  logic src_rows_we;
  logic [15:0] src_rows_qs;
  logic [15:0] src_rows_wd;
  logic dst_config_we;
  logic dst_config_enable_qs;
  logic dst_config_enable_wd;
  logic [1:0] dst_config_col_inc_qs;
  logic [1:0] dst_config_col_inc_wd;
  logic dst_status_we;
  logic [7:0] dst_status_qs;
  logic [7:0] dst_status_wd;
  logic dst_cap_lo_we;
  logic [31:0] dst_cap_lo_qs;
  logic [31:0] dst_cap_lo_wd;
  logic dst_cap_hi_we;
  logic [31:0] dst_cap_hi_qs;
  logic [31:0] dst_cap_hi_wd;
  logic dst_stride_we;
  logic [31:0] dst_stride_qs;
  logic [31:0] dst_stride_wd;
  logic dst_row_len_we;
  logic [19:0] dst_row_len_qs;
  logic [19:0] dst_row_len_wd;
  logic dst_rows_we;
  logic [15:0] dst_rows_qs;
  logic [15:0] dst_rows_wd;

  // Register instances
  // R[intr_state]: V(False)
  //   F[completed]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state_completed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_completed_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.completed.de),
    .d      (hw2reg.intr_state.completed.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.completed.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_completed_qs)
  );

  //   F[error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessW1C),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_state_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_state_we),
    .wd     (intr_state_error_wd),

    // from internal hardware
    .de     (hw2reg.intr_state.error.de),
    .d      (hw2reg.intr_state.error.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_state.error.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_state_error_qs)
  );


  // R[intr_enable]: V(False)
  //   F[completed]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable_completed (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_completed_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.completed.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_completed_qs)
  );

  //   F[error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_intr_enable_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (intr_enable_we),
    .wd     (intr_enable_error_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.intr_enable.error.q),
    .ds     (),

    // to register interface (read)
    .qs     (intr_enable_error_qs)
  );


  // R[intr_test]: V(True)
  logic intr_test_qe;
  logic [1:0] intr_test_flds_we;
  assign intr_test_qe = &intr_test_flds_we;
  //   F[completed]: 0:0
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_completed (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_completed_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[0]),
    .q      (reg2hw.intr_test.completed.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.completed.qe = intr_test_qe;

  //   F[error]: 1:1
  prim_subreg_ext #(
    .DW    (1)
  ) u_intr_test_error (
    .re     (1'b0),
    .we     (intr_test_we),
    .wd     (intr_test_error_wd),
    .d      ('0),
    .qre    (),
    .qe     (intr_test_flds_we[1]),
    .q      (reg2hw.intr_test.error.q),
    .ds     (),
    .qs     ()
  );
  assign reg2hw.intr_test.error.qe = intr_test_qe;


  // R[control]: V(False)
  logic control_qe;
  logic [2:0] control_flds_we;
  prim_flop #(
    .Width(1),
    .ResetValue(0)
  ) u_control0_qe (
    .clk_i(clk_i),
    .rst_ni(rst_ni),
    .d_i(&control_flds_we),
    .q_o(control_qe)
  );
  //   F[start]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_control_start (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_start_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (control_flds_we[0]),
    .q      (reg2hw.control.start.q),
    .ds     (),

    // to register interface (read)
    .qs     (control_start_qs)
  );
  assign reg2hw.control.start.qe = control_qe;

  //   F[pause]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_control_pause (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_pause_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (control_flds_we[1]),
    .q      (reg2hw.control.pause.q),
    .ds     (),

    // to register interface (read)
    .qs     (control_pause_qs)
  );
  assign reg2hw.control.pause.qe = control_qe;

  //   F[abort]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_control_abort (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (control_we),
    .wd     (control_abort_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (control_flds_we[2]),
    .q      (reg2hw.control.abort.q),
    .ds     (),

    // to register interface (read)
    .qs     (control_abort_qs)
  );
  assign reg2hw.control.abort.qe = control_qe;


  // R[status]: V(True)
  //   F[state]: 3:0
  prim_subreg_ext #(
    .DW    (4)
  ) u_status_state (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.state.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_state_qs)
  );

  //   F[rd_idle]: 4:4
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_rd_idle (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.rd_idle.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_rd_idle_qs)
  );

  //   F[wr_idle]: 5:5
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_wr_idle (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.wr_idle.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_wr_idle_qs)
  );

  //   F[rd_active]: 6:6
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_rd_active (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.rd_active.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_rd_active_qs)
  );

  //   F[wr_active]: 7:7
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_wr_active (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.wr_active.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_wr_active_qs)
  );

  //   F[rd_paused]: 8:8
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_rd_paused (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.rd_paused.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_rd_paused_qs)
  );

  //   F[wr_paused]: 9:9
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_wr_paused (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.wr_paused.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_wr_paused_qs)
  );

  //   F[wr_error]: 11:11
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_wr_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.wr_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_wr_error_qs)
  );

  //   F[rd_error]: 12:12
  prim_subreg_ext #(
    .DW    (1)
  ) u_status_rd_error (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.rd_error.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_rd_error_qs)
  );

  //   F[committed]: 23:16
  prim_subreg_ext #(
    .DW    (8)
  ) u_status_committed (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.committed.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_committed_qs)
  );

  //   F[wr_pending]: 31:24
  prim_subreg_ext #(
    .DW    (8)
  ) u_status_wr_pending (
    .re     (status_re),
    .we     (1'b0),
    .wd     ('0),
    .d      (hw2reg.status.wr_pending.d),
    .qre    (),
    .qe     (),
    .q      (),
    .ds     (),
    .qs     (status_wr_pending_qs)
  );


  // R[error]: V(False)
  //   F[rd_cap_error]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_error_rd_cap_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.error.rd_cap_error.de),
    .d      (hw2reg.error.rd_cap_error.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (error_rd_cap_error_qs)
  );

  //   F[wr_cap_error]: 1:1
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_error_wr_cap_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.error.wr_cap_error.de),
    .d      (hw2reg.error.wr_cap_error.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (error_wr_cap_error_qs)
  );

  //   F[rd_bus_error]: 2:2
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_error_rd_bus_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.error.rd_bus_error.de),
    .d      (hw2reg.error.rd_bus_error.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (error_rd_bus_error_qs)
  );

  //   F[wr_bus_error]: 3:3
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRO),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_error_wr_bus_error (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (1'b0),
    .wd     ('0),

    // from internal hardware
    .de     (hw2reg.error.wr_bus_error.de),
    .d      (hw2reg.error.wr_bus_error.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (error_wr_bus_error_qs)
  );


  // R[src_config]: V(False)
  //   F[enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_src_config_enable (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (src_config_we),
    .wd     (src_config_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.src_config.enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (src_config_enable_qs)
  );

  //   F[col_inc]: 5:4
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h1),
    .Mubi    (1'b0)
  ) u_src_config_col_inc (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (src_config_we),
    .wd     (src_config_col_inc_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.src_config.col_inc.q),
    .ds     (),

    // to register interface (read)
    .qs     (src_config_col_inc_qs)
  );


  // R[src_status]: V(False)
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_src_status (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (src_status_we),
    .wd     (src_status_wd),

    // from internal hardware
    .de     (hw2reg.src_status.de),
    .d      (hw2reg.src_status.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (src_status_qs)
  );


  // R[src_cap_lo]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_src_cap_lo (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (src_cap_lo_we),
    .wd     (src_cap_lo_wd),

    // from internal hardware
    .de     (hw2reg.src_cap_lo.de),
    .d      (hw2reg.src_cap_lo.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.src_cap_lo.q),
    .ds     (),

    // to register interface (read)
    .qs     (src_cap_lo_qs)
  );


  // R[src_cap_hi]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_src_cap_hi (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (src_cap_hi_we),
    .wd     (src_cap_hi_wd),

    // from internal hardware
    .de     (hw2reg.src_cap_hi.de),
    .d      (hw2reg.src_cap_hi.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.src_cap_hi.q),
    .ds     (),

    // to register interface (read)
    .qs     (src_cap_hi_qs)
  );


  // R[src_stride]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_src_stride (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (src_stride_we),
    .wd     (src_stride_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.src_stride.q),
    .ds     (),

    // to register interface (read)
    .qs     (src_stride_qs)
  );


  // R[src_row_len]: V(False)
  prim_subreg #(
    .DW      (20),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (20'h0),
    .Mubi    (1'b0)
  ) u_src_row_len (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (src_row_len_we),
    .wd     (src_row_len_wd),

    // from internal hardware
    .de     (hw2reg.src_row_len.de),
    .d      (hw2reg.src_row_len.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.src_row_len.q),
    .ds     (),

    // to register interface (read)
    .qs     (src_row_len_qs)
  );


  // R[src_rows]: V(False)
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_src_rows (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (src_rows_we),
    .wd     (src_rows_wd),

    // from internal hardware
    .de     (hw2reg.src_rows.de),
    .d      (hw2reg.src_rows.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.src_rows.q),
    .ds     (),

    // to register interface (read)
    .qs     (src_rows_qs)
  );


  // R[dst_config]: V(False)
  //   F[enable]: 0:0
  prim_subreg #(
    .DW      (1),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (1'h0),
    .Mubi    (1'b0)
  ) u_dst_config_enable (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dst_config_we),
    .wd     (dst_config_enable_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dst_config.enable.q),
    .ds     (),

    // to register interface (read)
    .qs     (dst_config_enable_qs)
  );

  //   F[col_inc]: 5:4
  prim_subreg #(
    .DW      (2),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (2'h1),
    .Mubi    (1'b0)
  ) u_dst_config_col_inc (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dst_config_we),
    .wd     (dst_config_col_inc_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dst_config.col_inc.q),
    .ds     (),

    // to register interface (read)
    .qs     (dst_config_col_inc_qs)
  );


  // R[dst_status]: V(False)
  prim_subreg #(
    .DW      (8),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (8'h0),
    .Mubi    (1'b0)
  ) u_dst_status (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dst_status_we),
    .wd     (dst_status_wd),

    // from internal hardware
    .de     (hw2reg.dst_status.de),
    .d      (hw2reg.dst_status.d),

    // to internal hardware
    .qe     (),
    .q      (),
    .ds     (),

    // to register interface (read)
    .qs     (dst_status_qs)
  );


  // R[dst_cap_lo]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_dst_cap_lo (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dst_cap_lo_we),
    .wd     (dst_cap_lo_wd),

    // from internal hardware
    .de     (hw2reg.dst_cap_lo.de),
    .d      (hw2reg.dst_cap_lo.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dst_cap_lo.q),
    .ds     (),

    // to register interface (read)
    .qs     (dst_cap_lo_qs)
  );


  // R[dst_cap_hi]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_dst_cap_hi (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dst_cap_hi_we),
    .wd     (dst_cap_hi_wd),

    // from internal hardware
    .de     (hw2reg.dst_cap_hi.de),
    .d      (hw2reg.dst_cap_hi.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dst_cap_hi.q),
    .ds     (),

    // to register interface (read)
    .qs     (dst_cap_hi_qs)
  );


  // R[dst_stride]: V(False)
  prim_subreg #(
    .DW      (32),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (32'h0),
    .Mubi    (1'b0)
  ) u_dst_stride (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dst_stride_we),
    .wd     (dst_stride_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dst_stride.q),
    .ds     (),

    // to register interface (read)
    .qs     (dst_stride_qs)
  );


  // R[dst_row_len]: V(False)
  prim_subreg #(
    .DW      (20),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (20'h0),
    .Mubi    (1'b0)
  ) u_dst_row_len (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dst_row_len_we),
    .wd     (dst_row_len_wd),

    // from internal hardware
    .de     (hw2reg.dst_row_len.de),
    .d      (hw2reg.dst_row_len.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dst_row_len.q),
    .ds     (),

    // to register interface (read)
    .qs     (dst_row_len_qs)
  );


  // R[dst_rows]: V(False)
  prim_subreg #(
    .DW      (16),
    .SwAccess(prim_subreg_pkg::SwAccessRW),
    .RESVAL  (16'h0),
    .Mubi    (1'b0)
  ) u_dst_rows (
    .clk_i   (clk_i),
    .rst_ni  (rst_ni),

    // from register interface
    .we     (dst_rows_we),
    .wd     (dst_rows_wd),

    // from internal hardware
    .de     (hw2reg.dst_rows.de),
    .d      (hw2reg.dst_rows.d),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.dst_rows.q),
    .ds     (),

    // to register interface (read)
    .qs     (dst_rows_qs)
  );



  logic [19:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[ 0] = (reg_addr == DMA_INTR_STATE_OFFSET);
    addr_hit[ 1] = (reg_addr == DMA_INTR_ENABLE_OFFSET);
    addr_hit[ 2] = (reg_addr == DMA_INTR_TEST_OFFSET);
    addr_hit[ 3] = (reg_addr == DMA_CONTROL_OFFSET);
    addr_hit[ 4] = (reg_addr == DMA_STATUS_OFFSET);
    addr_hit[ 5] = (reg_addr == DMA_ERROR_OFFSET);
    addr_hit[ 6] = (reg_addr == DMA_SRC_CONFIG_OFFSET);
    addr_hit[ 7] = (reg_addr == DMA_SRC_STATUS_OFFSET);
    addr_hit[ 8] = (reg_addr == DMA_SRC_CAP_LO_OFFSET);
    addr_hit[ 9] = (reg_addr == DMA_SRC_CAP_HI_OFFSET);
    addr_hit[10] = (reg_addr == DMA_SRC_STRIDE_OFFSET);
    addr_hit[11] = (reg_addr == DMA_SRC_ROW_LEN_OFFSET);
    addr_hit[12] = (reg_addr == DMA_SRC_ROWS_OFFSET);
    addr_hit[13] = (reg_addr == DMA_DST_CONFIG_OFFSET);
    addr_hit[14] = (reg_addr == DMA_DST_STATUS_OFFSET);
    addr_hit[15] = (reg_addr == DMA_DST_CAP_LO_OFFSET);
    addr_hit[16] = (reg_addr == DMA_DST_CAP_HI_OFFSET);
    addr_hit[17] = (reg_addr == DMA_DST_STRIDE_OFFSET);
    addr_hit[18] = (reg_addr == DMA_DST_ROW_LEN_OFFSET);
    addr_hit[19] = (reg_addr == DMA_DST_ROWS_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(DMA_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(DMA_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(DMA_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(DMA_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(DMA_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(DMA_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(DMA_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(DMA_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(DMA_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(DMA_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(DMA_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(DMA_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(DMA_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(DMA_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(DMA_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(DMA_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(DMA_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(DMA_PERMIT[17] & ~reg_be))) |
               (addr_hit[18] & (|(DMA_PERMIT[18] & ~reg_be))) |
               (addr_hit[19] & (|(DMA_PERMIT[19] & ~reg_be)))));
  end

  // Generate write-enables
  assign intr_state_we = addr_hit[0] & reg_we & !reg_error;

  assign intr_state_completed_wd = reg_wdata[0];

  assign intr_state_error_wd = reg_wdata[1];
  assign intr_enable_we = addr_hit[1] & reg_we & !reg_error;

  assign intr_enable_completed_wd = reg_wdata[0];

  assign intr_enable_error_wd = reg_wdata[1];
  assign intr_test_we = addr_hit[2] & reg_we & !reg_error;

  assign intr_test_completed_wd = reg_wdata[0];

  assign intr_test_error_wd = reg_wdata[1];
  assign control_we = addr_hit[3] & reg_we & !reg_error;

  assign control_start_wd = reg_wdata[0];

  assign control_pause_wd = reg_wdata[1];

  assign control_abort_wd = reg_wdata[2];
  assign status_re = addr_hit[4] & reg_re & !reg_error;
  assign src_config_we = addr_hit[6] & reg_we & !reg_error;

  assign src_config_enable_wd = reg_wdata[0];

  assign src_config_col_inc_wd = reg_wdata[5:4];
  assign src_status_we = addr_hit[7] & reg_we & !reg_error;

  assign src_status_wd = reg_wdata[31:24];
  assign src_cap_lo_we = addr_hit[8] & reg_we & !reg_error;

  assign src_cap_lo_wd = reg_wdata[31:0];
  assign src_cap_hi_we = addr_hit[9] & reg_we & !reg_error;

  assign src_cap_hi_wd = reg_wdata[31:0];
  assign src_stride_we = addr_hit[10] & reg_we & !reg_error;

  assign src_stride_wd = reg_wdata[31:0];
  assign src_row_len_we = addr_hit[11] & reg_we & !reg_error;

  assign src_row_len_wd = reg_wdata[19:0];
  assign src_rows_we = addr_hit[12] & reg_we & !reg_error;

  assign src_rows_wd = reg_wdata[15:0];
  assign dst_config_we = addr_hit[13] & reg_we & !reg_error;

  assign dst_config_enable_wd = reg_wdata[0];

  assign dst_config_col_inc_wd = reg_wdata[5:4];
  assign dst_status_we = addr_hit[14] & reg_we & !reg_error;

  assign dst_status_wd = reg_wdata[31:24];
  assign dst_cap_lo_we = addr_hit[15] & reg_we & !reg_error;

  assign dst_cap_lo_wd = reg_wdata[31:0];
  assign dst_cap_hi_we = addr_hit[16] & reg_we & !reg_error;

  assign dst_cap_hi_wd = reg_wdata[31:0];
  assign dst_stride_we = addr_hit[17] & reg_we & !reg_error;

  assign dst_stride_wd = reg_wdata[31:0];
  assign dst_row_len_we = addr_hit[18] & reg_we & !reg_error;

  assign dst_row_len_wd = reg_wdata[19:0];
  assign dst_rows_we = addr_hit[19] & reg_we & !reg_error;

  assign dst_rows_wd = reg_wdata[15:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = intr_state_completed_qs;
        reg_rdata_next[1] = intr_state_error_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[0] = intr_enable_completed_qs;
        reg_rdata_next[1] = intr_enable_error_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[1] = '0;
      end

      addr_hit[3]: begin
        reg_rdata_next[0] = control_start_qs;
        reg_rdata_next[1] = control_pause_qs;
        reg_rdata_next[2] = control_abort_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[3:0] = status_state_qs;
        reg_rdata_next[4] = status_rd_idle_qs;
        reg_rdata_next[5] = status_wr_idle_qs;
        reg_rdata_next[6] = status_rd_active_qs;
        reg_rdata_next[7] = status_wr_active_qs;
        reg_rdata_next[8] = status_rd_paused_qs;
        reg_rdata_next[9] = status_wr_paused_qs;
        reg_rdata_next[11] = status_wr_error_qs;
        reg_rdata_next[12] = status_rd_error_qs;
        reg_rdata_next[23:16] = status_committed_qs;
        reg_rdata_next[31:24] = status_wr_pending_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[0] = error_rd_cap_error_qs;
        reg_rdata_next[1] = error_wr_cap_error_qs;
        reg_rdata_next[2] = error_rd_bus_error_qs;
        reg_rdata_next[3] = error_wr_bus_error_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[0] = src_config_enable_qs;
        reg_rdata_next[5:4] = src_config_col_inc_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[31:24] = src_status_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[31:0] = src_cap_lo_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[31:0] = src_cap_hi_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[31:0] = src_stride_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[19:0] = src_row_len_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[15:0] = src_rows_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[0] = dst_config_enable_qs;
        reg_rdata_next[5:4] = dst_config_col_inc_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[31:24] = dst_status_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[31:0] = dst_cap_lo_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[31:0] = dst_cap_hi_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[31:0] = dst_stride_qs;
      end

      addr_hit[18]: begin
        reg_rdata_next[19:0] = dst_row_len_qs;
      end

      addr_hit[19]: begin
        reg_rdata_next[15:0] = dst_rows_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // shadow busy
  logic shadow_busy;
  assign shadow_busy = 1'b0;

  // register busy
  assign reg_busy = shadow_busy;

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT_PULSE(wePulse, reg_we, clk_i, !rst_ni)
  `ASSERT_PULSE(rePulse, reg_re, clk_i, !rst_ni)

  `ASSERT(reAfterRv, $rose(reg_re || reg_we) |=> tl_o_pre.d_valid, clk_i, !rst_ni)

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit), clk_i, !rst_ni)

  // this is formulated as an assumption such that the FPV testbenches do disprove this
  // property by mistake
  //`ASSUME(reqParity, tl_reg_h2d.a_valid |-> tl_reg_h2d.a_user.chk_en == tlul_pkg::CheckDis)

endmodule
